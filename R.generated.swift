//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 38 files.
  struct file {
    /// Resource file `Gilroy-Bold.otf`.
    static let gilroyBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gilroy-Bold", pathExtension: "otf")
    /// Resource file `Gilroy-Medium.otf`.
    static let gilroyMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gilroy-Medium", pathExtension: "otf")
    /// Resource file `Gilroy_BB-Bold.otf`.
    static let gilroy_BBBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gilroy_BB-Bold", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Black Italic.otf`.
    static let giorgioSansLCGBlackItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Black Italic", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Black.otf`.
    static let giorgioSansLCGBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Black", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Bold Italic.otf`.
    static let giorgioSansLCGBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Bold Italic", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Bold.otf`.
    static let giorgioSansLCGBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Bold", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Extralight Italic.otf`.
    static let giorgioSansLCGExtralightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Extralight Italic", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Extralight.otf`.
    static let giorgioSansLCGExtralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Extralight", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Heavy Italic.otf`.
    static let giorgioSansLCGHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Heavy Italic", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Heavy.otf`.
    static let giorgioSansLCGHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Heavy", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Light Italic.otf`.
    static let giorgioSansLCGLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Light Italic", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Light.otf`.
    static let giorgioSansLCGLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Light", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Medium Italic.otf`.
    static let giorgioSansLCGMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Medium Italic", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Medium.otf`.
    static let giorgioSansLCGMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Medium", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Regular Italic.otf`.
    static let giorgioSansLCGRegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Regular Italic", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Regular.otf`.
    static let giorgioSansLCGRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Regular", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Thin Italic.otf`.
    static let giorgioSansLCGThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Thin Italic", pathExtension: "otf")
    /// Resource file `Giorgio Sans LCG Thin.otf`.
    static let giorgioSansLCGThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Giorgio Sans LCG Thin", pathExtension: "otf")
    /// Resource file `Lato_BB-Bold.otf`.
    static let lato_BBBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato_BB-Bold", pathExtension: "otf")
    /// Resource file `Lato_BB-Regular.otf`.
    static let lato_BBRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato_BB-Regular", pathExtension: "otf")
    /// Resource file `Lucita Grande-Bold.ttf`.
    static let lucitaGrandeBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lucita Grande-Bold", pathExtension: "ttf")
    /// Resource file `Lucita Grande.ttf`.
    static let lucitaGrandeTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lucita Grande", pathExtension: "ttf")
    /// Resource file `Roboto-Black.ttf`.
    static let robotoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Black", pathExtension: "ttf")
    /// Resource file `Roboto-BlackItalic.ttf`.
    static let robotoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BlackItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Thin.ttf`.
    static let robotoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Thin", pathExtension: "ttf")
    /// Resource file `Roboto-ThinItalic.ttf`.
    static let robotoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-ThinItalic", pathExtension: "ttf")
    /// Resource file `SFProDisplay-Regular.ttf`.
    static let sfProDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Regular", pathExtension: "ttf")
    /// Resource file `illustration_6.json`.
    static let illustration_6Json = Rswift.FileResource(bundle: R.hostingBundle, name: "illustration_6", pathExtension: "json")
    /// Resource file `illustration_7.json`.
    static let illustration_7Json = Rswift.FileResource(bundle: R.hostingBundle, name: "illustration_7", pathExtension: "json")

    /// `bundle.url(forResource: "Gilroy-Bold", withExtension: "otf")`
    static func gilroyBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gilroyBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gilroy-Medium", withExtension: "otf")`
    static func gilroyMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gilroyMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gilroy_BB-Bold", withExtension: "otf")`
    static func gilroy_BBBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gilroy_BBBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Black Italic", withExtension: "otf")`
    static func giorgioSansLCGBlackItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGBlackItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Black", withExtension: "otf")`
    static func giorgioSansLCGBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Bold Italic", withExtension: "otf")`
    static func giorgioSansLCGBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Bold", withExtension: "otf")`
    static func giorgioSansLCGBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Extralight Italic", withExtension: "otf")`
    static func giorgioSansLCGExtralightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGExtralightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Extralight", withExtension: "otf")`
    static func giorgioSansLCGExtralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGExtralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Heavy Italic", withExtension: "otf")`
    static func giorgioSansLCGHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Heavy", withExtension: "otf")`
    static func giorgioSansLCGHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Light Italic", withExtension: "otf")`
    static func giorgioSansLCGLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Light", withExtension: "otf")`
    static func giorgioSansLCGLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Medium Italic", withExtension: "otf")`
    static func giorgioSansLCGMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Medium", withExtension: "otf")`
    static func giorgioSansLCGMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Regular Italic", withExtension: "otf")`
    static func giorgioSansLCGRegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGRegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Regular", withExtension: "otf")`
    static func giorgioSansLCGRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Thin Italic", withExtension: "otf")`
    static func giorgioSansLCGThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Giorgio Sans LCG Thin", withExtension: "otf")`
    static func giorgioSansLCGThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giorgioSansLCGThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato_BB-Bold", withExtension: "otf")`
    static func lato_BBBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lato_BBBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato_BB-Regular", withExtension: "otf")`
    static func lato_BBRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lato_BBRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lucita Grande", withExtension: "ttf")`
    static func lucitaGrandeTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lucitaGrandeTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lucita Grande-Bold", withExtension: "ttf")`
    static func lucitaGrandeBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lucitaGrandeBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Black", withExtension: "ttf")`
    static func robotoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BlackItalic", withExtension: "ttf")`
    static func robotoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Thin", withExtension: "ttf")`
    static func robotoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-ThinItalic", withExtension: "ttf")`
    static func robotoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Regular", withExtension: "ttf")`
    static func sfProDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "illustration_6", withExtension: "json")`
    static func illustration_6Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.illustration_6Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "illustration_7", withExtension: "json")`
    static func illustration_7Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.illustration_7Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 36 fonts.
  struct font: Rswift.Validatable {
    /// Font `Gilroy-Bold`.
    static let gilroyBold = Rswift.FontResource(fontName: "Gilroy-Bold")
    /// Font `Gilroy-Medium`.
    static let gilroyMedium = Rswift.FontResource(fontName: "Gilroy-Medium")
    /// Font `Gilroy_BB-Bold`.
    static let gilroy_BBBold = Rswift.FontResource(fontName: "Gilroy_BB-Bold")
    /// Font `GiorgioSansLCG-BlackItalic`.
    static let giorgioSansLCGBlackItalic = Rswift.FontResource(fontName: "GiorgioSansLCG-BlackItalic")
    /// Font `GiorgioSansLCG-Black`.
    static let giorgioSansLCGBlack = Rswift.FontResource(fontName: "GiorgioSansLCG-Black")
    /// Font `GiorgioSansLCG-BoldItalic`.
    static let giorgioSansLCGBoldItalic = Rswift.FontResource(fontName: "GiorgioSansLCG-BoldItalic")
    /// Font `GiorgioSansLCG-Bold`.
    static let giorgioSansLCGBold = Rswift.FontResource(fontName: "GiorgioSansLCG-Bold")
    /// Font `GiorgioSansLCG-ExtraLightItalic`.
    static let giorgioSansLCGExtraLightItalic = Rswift.FontResource(fontName: "GiorgioSansLCG-ExtraLightItalic")
    /// Font `GiorgioSansLCG-ExtraLight`.
    static let giorgioSansLCGExtraLight = Rswift.FontResource(fontName: "GiorgioSansLCG-ExtraLight")
    /// Font `GiorgioSansLCG-HeavyItalic`.
    static let giorgioSansLCGHeavyItalic = Rswift.FontResource(fontName: "GiorgioSansLCG-HeavyItalic")
    /// Font `GiorgioSansLCG-Heavy`.
    static let giorgioSansLCGHeavy = Rswift.FontResource(fontName: "GiorgioSansLCG-Heavy")
    /// Font `GiorgioSansLCG-Italic`.
    static let giorgioSansLCGItalic = Rswift.FontResource(fontName: "GiorgioSansLCG-Italic")
    /// Font `GiorgioSansLCG-LightItalic`.
    static let giorgioSansLCGLightItalic = Rswift.FontResource(fontName: "GiorgioSansLCG-LightItalic")
    /// Font `GiorgioSansLCG-Light`.
    static let giorgioSansLCGLight = Rswift.FontResource(fontName: "GiorgioSansLCG-Light")
    /// Font `GiorgioSansLCG-MediumItalic`.
    static let giorgioSansLCGMediumItalic = Rswift.FontResource(fontName: "GiorgioSansLCG-MediumItalic")
    /// Font `GiorgioSansLCG-Medium`.
    static let giorgioSansLCGMedium = Rswift.FontResource(fontName: "GiorgioSansLCG-Medium")
    /// Font `GiorgioSansLCG-Regular`.
    static let giorgioSansLCGRegular = Rswift.FontResource(fontName: "GiorgioSansLCG-Regular")
    /// Font `GiorgioSansLCG-ThinItalic`.
    static let giorgioSansLCGThinItalic = Rswift.FontResource(fontName: "GiorgioSansLCG-ThinItalic")
    /// Font `GiorgioSansLCG-Thin`.
    static let giorgioSansLCGThin = Rswift.FontResource(fontName: "GiorgioSansLCG-Thin")
    /// Font `Lato_BB-Bold`.
    static let lato_BBBold = Rswift.FontResource(fontName: "Lato_BB-Bold")
    /// Font `Lato_BB-Regular`.
    static let lato_BBRegular = Rswift.FontResource(fontName: "Lato_BB-Regular")
    /// Font `LucidaGrande-Bold`.
    static let lucidaGrandeBold = Rswift.FontResource(fontName: "LucidaGrande-Bold")
    /// Font `LucidaGrande`.
    static let lucidaGrande = Rswift.FontResource(fontName: "LucidaGrande")
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")

    /// `UIFont(name: "Gilroy-Bold", size: ...)`
    static func gilroyBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gilroyBold, size: size)
    }

    /// `UIFont(name: "Gilroy-Medium", size: ...)`
    static func gilroyMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gilroyMedium, size: size)
    }

    /// `UIFont(name: "Gilroy_BB-Bold", size: ...)`
    static func gilroy_BBBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gilroy_BBBold, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-Black", size: ...)`
    static func giorgioSansLCGBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGBlack, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-BlackItalic", size: ...)`
    static func giorgioSansLCGBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGBlackItalic, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-Bold", size: ...)`
    static func giorgioSansLCGBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGBold, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-BoldItalic", size: ...)`
    static func giorgioSansLCGBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGBoldItalic, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-ExtraLight", size: ...)`
    static func giorgioSansLCGExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGExtraLight, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-ExtraLightItalic", size: ...)`
    static func giorgioSansLCGExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGExtraLightItalic, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-Heavy", size: ...)`
    static func giorgioSansLCGHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGHeavy, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-HeavyItalic", size: ...)`
    static func giorgioSansLCGHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGHeavyItalic, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-Italic", size: ...)`
    static func giorgioSansLCGItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGItalic, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-Light", size: ...)`
    static func giorgioSansLCGLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGLight, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-LightItalic", size: ...)`
    static func giorgioSansLCGLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGLightItalic, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-Medium", size: ...)`
    static func giorgioSansLCGMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGMedium, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-MediumItalic", size: ...)`
    static func giorgioSansLCGMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGMediumItalic, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-Regular", size: ...)`
    static func giorgioSansLCGRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGRegular, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-Thin", size: ...)`
    static func giorgioSansLCGThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGThin, size: size)
    }

    /// `UIFont(name: "GiorgioSansLCG-ThinItalic", size: ...)`
    static func giorgioSansLCGThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: giorgioSansLCGThinItalic, size: size)
    }

    /// `UIFont(name: "Lato_BB-Bold", size: ...)`
    static func lato_BBBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lato_BBBold, size: size)
    }

    /// `UIFont(name: "Lato_BB-Regular", size: ...)`
    static func lato_BBRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lato_BBRegular, size: size)
    }

    /// `UIFont(name: "LucidaGrande", size: ...)`
    static func lucidaGrande(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lucidaGrande, size: size)
    }

    /// `UIFont(name: "LucidaGrande-Bold", size: ...)`
    static func lucidaGrandeBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lucidaGrandeBold, size: size)
    }

    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }

    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }

    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.gilroyBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gilroy-Bold' could not be loaded, is 'Gilroy-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gilroyMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gilroy-Medium' could not be loaded, is 'Gilroy-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gilroy_BBBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gilroy_BB-Bold' could not be loaded, is 'Gilroy_BB-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-Black' could not be loaded, is 'Giorgio Sans LCG Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-BlackItalic' could not be loaded, is 'Giorgio Sans LCG Black Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-Bold' could not be loaded, is 'Giorgio Sans LCG Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-BoldItalic' could not be loaded, is 'Giorgio Sans LCG Bold Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-ExtraLight' could not be loaded, is 'Giorgio Sans LCG Extralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-ExtraLightItalic' could not be loaded, is 'Giorgio Sans LCG Extralight Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-Heavy' could not be loaded, is 'Giorgio Sans LCG Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-HeavyItalic' could not be loaded, is 'Giorgio Sans LCG Heavy Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-Italic' could not be loaded, is 'Giorgio Sans LCG Regular Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-Light' could not be loaded, is 'Giorgio Sans LCG Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-LightItalic' could not be loaded, is 'Giorgio Sans LCG Light Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-Medium' could not be loaded, is 'Giorgio Sans LCG Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-MediumItalic' could not be loaded, is 'Giorgio Sans LCG Medium Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-Regular' could not be loaded, is 'Giorgio Sans LCG Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-Thin' could not be loaded, is 'Giorgio Sans LCG Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.giorgioSansLCGThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GiorgioSansLCG-ThinItalic' could not be loaded, is 'Giorgio Sans LCG Thin Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lato_BBBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato_BB-Bold' could not be loaded, is 'Lato_BB-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lato_BBRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato_BB-Regular' could not be loaded, is 'Lato_BB-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lucidaGrande(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'LucidaGrande' could not be loaded, is 'Lucita Grande.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lucidaGrandeBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'LucidaGrande-Bold' could not be loaded, is 'Lucita Grande-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SFProDisplay-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 37 images.
  struct image {
    /// Image `CloseIcon`.
    static let closeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CloseIcon")
    /// Image `MakeBet`.
    static let makeBet = Rswift.ImageResource(bundle: R.hostingBundle, name: "MakeBet")
    /// Image `fullscreen`.
    static let fullscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullscreen")
    /// Image `green`.
    static let green = Rswift.ImageResource(bundle: R.hostingBundle, name: "green")
    /// Image `ic10ArrowDown`.
    static let ic10ArrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic10ArrowDown")
    /// Image `ic16Lock`.
    static let ic16Lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic16Lock")
    /// Image `ic56CyberTeamPlaceholder`.
    static let ic56CyberTeamPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic56CyberTeamPlaceholder")
    /// Image `icCyberAgeOfEmpires`.
    static let icCyberAgeOfEmpires = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberAgeOfEmpires")
    /// Image `icCyberArenaOfValor`.
    static let icCyberArenaOfValor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberArenaOfValor")
    /// Image `icCyberCallOfDuty`.
    static let icCyberCallOfDuty = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberCallOfDuty")
    /// Image `icCyberCsgo`.
    static let icCyberCsgo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberCsgo")
    /// Image `icCyberDota2`.
    static let icCyberDota2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberDota2")
    /// Image `icCyberFifa`.
    static let icCyberFifa = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberFifa")
    /// Image `icCyberFortnite`.
    static let icCyberFortnite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberFortnite")
    /// Image `icCyberHalo`.
    static let icCyberHalo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberHalo")
    /// Image `icCyberHearthstone`.
    static let icCyberHearthstone = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberHearthstone")
    /// Image `icCyberKingOfGlory`.
    static let icCyberKingOfGlory = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberKingOfGlory")
    /// Image `icCyberLol`.
    static let icCyberLol = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberLol")
    /// Image `icCyberMobileLegends`.
    static let icCyberMobileLegends = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberMobileLegends")
    /// Image `icCyberNba`.
    static let icCyberNba = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberNba")
    /// Image `icCyberNhl`.
    static let icCyberNhl = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberNhl")
    /// Image `icCyberOverwatch`.
    static let icCyberOverwatch = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberOverwatch")
    /// Image `icCyberPubg`.
    static let icCyberPubg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberPubg")
    /// Image `icCyberRainbow6`.
    static let icCyberRainbow6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberRainbow6")
    /// Image `icCyberRocketLeague`.
    static let icCyberRocketLeague = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberRocketLeague")
    /// Image `icCyberRushSoccer`.
    static let icCyberRushSoccer = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberRushSoccer")
    /// Image `icCyberStarcraft2`.
    static let icCyberStarcraft2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberStarcraft2")
    /// Image `icCyberStarcraft`.
    static let icCyberStarcraft = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberStarcraft")
    /// Image `icCyberValorant`.
    static let icCyberValorant = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberValorant")
    /// Image `icCyberWarcraft3`.
    static let icCyberWarcraft3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberWarcraft3")
    /// Image `icCyberWildRift`.
    static let icCyberWildRift = Rswift.ImageResource(bundle: R.hostingBundle, name: "icCyberWildRift")
    /// Image `icLiveInfo`.
    static let icLiveInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icLiveInfo")
    /// Image `mute`.
    static let mute = Rswift.ImageResource(bundle: R.hostingBundle, name: "mute")
    /// Image `palm`.
    static let palm = Rswift.ImageResource(bundle: R.hostingBundle, name: "palm")
    /// Image `red`.
    static let red = Rswift.ImageResource(bundle: R.hostingBundle, name: "red")
    /// Image `smile`.
    static let smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile")
    /// Image `unmute`.
    static let unmute = Rswift.ImageResource(bundle: R.hostingBundle, name: "unmute")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CloseIcon", bundle: ..., traitCollection: ...)`
    static func closeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MakeBet", bundle: ..., traitCollection: ...)`
    static func makeBet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.makeBet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fullscreen", bundle: ..., traitCollection: ...)`
    static func fullscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullscreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green", bundle: ..., traitCollection: ...)`
    static func green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic10ArrowDown", bundle: ..., traitCollection: ...)`
    static func ic10ArrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic10ArrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic16Lock", bundle: ..., traitCollection: ...)`
    static func ic16Lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic16Lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic56CyberTeamPlaceholder", bundle: ..., traitCollection: ...)`
    static func ic56CyberTeamPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic56CyberTeamPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberAgeOfEmpires", bundle: ..., traitCollection: ...)`
    static func icCyberAgeOfEmpires(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberAgeOfEmpires, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberArenaOfValor", bundle: ..., traitCollection: ...)`
    static func icCyberArenaOfValor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberArenaOfValor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberCallOfDuty", bundle: ..., traitCollection: ...)`
    static func icCyberCallOfDuty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberCallOfDuty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberCsgo", bundle: ..., traitCollection: ...)`
    static func icCyberCsgo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberCsgo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberDota2", bundle: ..., traitCollection: ...)`
    static func icCyberDota2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberDota2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberFifa", bundle: ..., traitCollection: ...)`
    static func icCyberFifa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberFifa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberFortnite", bundle: ..., traitCollection: ...)`
    static func icCyberFortnite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberFortnite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberHalo", bundle: ..., traitCollection: ...)`
    static func icCyberHalo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberHalo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberHearthstone", bundle: ..., traitCollection: ...)`
    static func icCyberHearthstone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberHearthstone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberKingOfGlory", bundle: ..., traitCollection: ...)`
    static func icCyberKingOfGlory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberKingOfGlory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberLol", bundle: ..., traitCollection: ...)`
    static func icCyberLol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberLol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberMobileLegends", bundle: ..., traitCollection: ...)`
    static func icCyberMobileLegends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberMobileLegends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberNba", bundle: ..., traitCollection: ...)`
    static func icCyberNba(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberNba, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberNhl", bundle: ..., traitCollection: ...)`
    static func icCyberNhl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberNhl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberOverwatch", bundle: ..., traitCollection: ...)`
    static func icCyberOverwatch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberOverwatch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberPubg", bundle: ..., traitCollection: ...)`
    static func icCyberPubg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberPubg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberRainbow6", bundle: ..., traitCollection: ...)`
    static func icCyberRainbow6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberRainbow6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberRocketLeague", bundle: ..., traitCollection: ...)`
    static func icCyberRocketLeague(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberRocketLeague, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberRushSoccer", bundle: ..., traitCollection: ...)`
    static func icCyberRushSoccer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberRushSoccer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberStarcraft", bundle: ..., traitCollection: ...)`
    static func icCyberStarcraft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberStarcraft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberStarcraft2", bundle: ..., traitCollection: ...)`
    static func icCyberStarcraft2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberStarcraft2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberValorant", bundle: ..., traitCollection: ...)`
    static func icCyberValorant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberValorant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberWarcraft3", bundle: ..., traitCollection: ...)`
    static func icCyberWarcraft3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberWarcraft3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icCyberWildRift", bundle: ..., traitCollection: ...)`
    static func icCyberWildRift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCyberWildRift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icLiveInfo", bundle: ..., traitCollection: ...)`
    static func icLiveInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLiveInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mute", bundle: ..., traitCollection: ...)`
    static func mute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mute, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "palm", bundle: ..., traitCollection: ...)`
    static func palm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.palm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "red", bundle: ..., traitCollection: ...)`
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile", bundle: ..., traitCollection: ...)`
    static func smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unmute", bundle: ..., traitCollection: ...)`
    static func unmute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unmute, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// en translation: This permission will allow us to recommend you the most suitable promotions and make personalized offers.
      ///
      /// Locales: es, en, pt-PT, ru
      static let nsUserTrackingUsageDescription = Rswift.StringResource(key: "NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["es", "en", "pt-PT", "ru"], comment: nil)

      /// en translation: This permission will allow us to recommend you the most suitable promotions and make personalized offers.
      ///
      /// Locales: es, en, pt-PT, ru
      static func nsUserTrackingUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSUserTrackingUsageDescription"
        }

        return NSLocalizedString("NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// en translation: Follow prematch events
      ///
      /// Locales: en, pt-PT, ru
      static let followForPrematch = Rswift.StringResource(key: "FollowForPrematch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-PT", "ru"], comment: nil)
      /// en translation: List of live  events is empty
      ///
      /// Locales: en, pt-PT, ru
      static let liveIsEmpty = Rswift.StringResource(key: "LiveIsEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-PT", "ru"], comment: nil)
      /// en translation: Make sure your phone has a stable network Internet connection and try again
      ///
      /// Locales: en, pt-PT, ru
      static let makeSureConnection = Rswift.StringResource(key: "MakeSureConnection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-PT", "ru"], comment: nil)
      /// en translation: No connection
      ///
      /// Locales: en, pt-PT, ru
      static let noConnection = Rswift.StringResource(key: "NoConnection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-PT", "ru"], comment: nil)
      /// en translation: No events
      ///
      /// Locales: en, pt-PT, ru
      static let noMatches = Rswift.StringResource(key: "NoMatches", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-PT", "ru"], comment: nil)
      /// en translation: Prematch
      ///
      /// Locales: en, pt-PT, ru
      static let prematchTitle = Rswift.StringResource(key: "PrematchTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-PT", "ru"], comment: nil)
      /// en translation: eSports
      ///
      /// Locales: en, pt-PT, ru
      static let cyberSportTitle = Rswift.StringResource(key: "CyberSportTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-PT", "ru"], comment: nil)

      /// en translation: Follow prematch events
      ///
      /// Locales: en, pt-PT, ru
      static func followForPrematch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FollowForPrematch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FollowForPrematch"
        }

        return NSLocalizedString("FollowForPrematch", bundle: bundle, comment: "")
      }

      /// en translation: List of live  events is empty
      ///
      /// Locales: en, pt-PT, ru
      static func liveIsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LiveIsEmpty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LiveIsEmpty"
        }

        return NSLocalizedString("LiveIsEmpty", bundle: bundle, comment: "")
      }

      /// en translation: Make sure your phone has a stable network Internet connection and try again
      ///
      /// Locales: en, pt-PT, ru
      static func makeSureConnection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MakeSureConnection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MakeSureConnection"
        }

        return NSLocalizedString("MakeSureConnection", bundle: bundle, comment: "")
      }

      /// en translation: No connection
      ///
      /// Locales: en, pt-PT, ru
      static func noConnection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoConnection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoConnection"
        }

        return NSLocalizedString("NoConnection", bundle: bundle, comment: "")
      }

      /// en translation: No events
      ///
      /// Locales: en, pt-PT, ru
      static func noMatches(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoMatches", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoMatches"
        }

        return NSLocalizedString("NoMatches", bundle: bundle, comment: "")
      }

      /// en translation: Prematch
      ///
      /// Locales: en, pt-PT, ru
      static func prematchTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PrematchTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PrematchTitle"
        }

        return NSLocalizedString("PrematchTitle", bundle: bundle, comment: "")
      }

      /// en translation: eSports
      ///
      /// Locales: en, pt-PT, ru
      static func cyberSportTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CyberSportTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CyberSportTitle"
        }

        return NSLocalizedString("CyberSportTitle", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 3 localization keys.
    struct main {
      /// en translation: Make a bet
      ///
      /// Locales: pt-PT, ru, en
      static let lu7HSHNPNormalTitle = Rswift.StringResource(key: "LU7-hS-HNP.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-PT", "ru", "en"], comment: nil)
      /// en translation: Place bets in the BetBoom app
      ///
      /// Locales: pt-PT, ru, en
      static let giQGmVQEText = Rswift.StringResource(key: "GiQ-Gm-VQE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-PT", "ru", "en"], comment: nil)
      /// en translation: UNLOCK THE GAME WITH THE BEST BOOKMER
      ///
      /// Locales: pt-PT, ru, en
      static let c3QXCn0Text = Rswift.StringResource(key: "6c3-qX-cn0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-PT", "ru", "en"], comment: nil)

      /// en translation: Make a bet
      ///
      /// Locales: pt-PT, ru, en
      static func lu7HSHNPNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LU7-hS-HNP.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LU7-hS-HNP.normalTitle"
        }

        return NSLocalizedString("LU7-hS-HNP.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Place bets in the BetBoom app
      ///
      /// Locales: pt-PT, ru, en
      static func giQGmVQEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GiQ-Gm-VQE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GiQ-Gm-VQE.text"
        }

        return NSLocalizedString("GiQ-Gm-VQE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: UNLOCK THE GAME WITH THE BEST BOOKMER
      ///
      /// Locales: pt-PT, ru, en
      static func c3QXCn0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6c3-qX-cn0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6c3-qX-cn0.text"
        }

        return NSLocalizedString("6c3-qX-cn0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationController

      let broadcast = StoryboardViewControllerResource<BroadcastViewController>(identifier: "Broadcast")
      let bundle = R.hostingBundle
      let makeBetVIewController = StoryboardViewControllerResource<MakeBetVIewController>(identifier: "MakeBetVIewController")
      let name = "Main"

      func broadcast(_: Void = ()) -> BroadcastViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: broadcast)
      }

      func makeBetVIewController(_: Void = ()) -> MakeBetVIewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: makeBetVIewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "MakeBet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MakeBet' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().broadcast() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'broadcast' could not be loaded from storyboard 'Main' as 'BroadcastViewController'.") }
        if _R.storyboard.main().makeBetVIewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'makeBetVIewController' could not be loaded from storyboard 'Main' as 'MakeBetVIewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
