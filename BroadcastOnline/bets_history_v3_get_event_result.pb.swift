// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bets_history_v3_get_event_result.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bb_BetsHistoryV3GetEventResultRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var provider: String = String()

  var matchID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bb_BetsHistoryV3GetEventResultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Int32 = 0

  var status: String = String()

  var error: Bb_Error {
    get {return _error ?? Bb_Error()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var eventResult: Bb_BetsHistoryV3GetEventResultResponse.EventResult {
    get {return _eventResult ?? Bb_BetsHistoryV3GetEventResultResponse.EventResult()}
    set {_eventResult = newValue}
  }
  /// Returns true if `eventResult` has been explicitly set.
  var hasEventResult: Bool {return self._eventResult != nil}
  /// Clears the value of `eventResult`. Subsequent reads from it will return its default value.
  mutating func clearEventResult() {self._eventResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct EventResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var sportID: String = String()

    var sportName: String = String()

    var tournamentID: String = String()

    var tournamentName: String = String()

    var startDttm: String = String()

    var score: String = String()

    var teams: [Bb_BetsHistoryV3GetEventResultResponse.EventResult.Team] = []

    var periodScores: [Bb_BetsHistoryV3GetEventResultResponse.EventResult.PeriodScore] = []

    var favoritePeriodScoreProperties: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Team {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var home: Bool = false

      var name: String = String()

      var score: Int32 = 0

      var image: String {
        get {return _image ?? String()}
        set {_image = newValue}
      }
      /// Returns true if `image` has been explicitly set.
      var hasImage: Bool {return self._image != nil}
      /// Clears the value of `image`. Subsequent reads from it will return its default value.
      mutating func clearImage() {self._image = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _image: String? = nil
    }

    struct PeriodScore {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var type: String = String()

      var number: Int32 = 0

      var homeScore: Int32 = 0

      var awayScore: Int32 = 0

      var matchStatus: String = String()

      var homeKills: Int32 {
        get {return _homeKills ?? 0}
        set {_homeKills = newValue}
      }
      /// Returns true if `homeKills` has been explicitly set.
      var hasHomeKills: Bool {return self._homeKills != nil}
      /// Clears the value of `homeKills`. Subsequent reads from it will return its default value.
      mutating func clearHomeKills() {self._homeKills = nil}

      var awayKills: Int32 {
        get {return _awayKills ?? 0}
        set {_awayKills = newValue}
      }
      /// Returns true if `awayKills` has been explicitly set.
      var hasAwayKills: Bool {return self._awayKills != nil}
      /// Clears the value of `awayKills`. Subsequent reads from it will return its default value.
      mutating func clearAwayKills() {self._awayKills = nil}

      var homeGoals: Int32 {
        get {return _homeGoals ?? 0}
        set {_homeGoals = newValue}
      }
      /// Returns true if `homeGoals` has been explicitly set.
      var hasHomeGoals: Bool {return self._homeGoals != nil}
      /// Clears the value of `homeGoals`. Subsequent reads from it will return its default value.
      mutating func clearHomeGoals() {self._homeGoals = nil}

      var awayGoals: Int32 {
        get {return _awayGoals ?? 0}
        set {_awayGoals = newValue}
      }
      /// Returns true if `awayGoals` has been explicitly set.
      var hasAwayGoals: Bool {return self._awayGoals != nil}
      /// Clears the value of `awayGoals`. Subsequent reads from it will return its default value.
      mutating func clearAwayGoals() {self._awayGoals = nil}

      var homeWonRounds: Int32 {
        get {return _homeWonRounds ?? 0}
        set {_homeWonRounds = newValue}
      }
      /// Returns true if `homeWonRounds` has been explicitly set.
      var hasHomeWonRounds: Bool {return self._homeWonRounds != nil}
      /// Clears the value of `homeWonRounds`. Subsequent reads from it will return its default value.
      mutating func clearHomeWonRounds() {self._homeWonRounds = nil}

      var awayWonRounds: Int32 {
        get {return _awayWonRounds ?? 0}
        set {_awayWonRounds = newValue}
      }
      /// Returns true if `awayWonRounds` has been explicitly set.
      var hasAwayWonRounds: Bool {return self._awayWonRounds != nil}
      /// Clears the value of `awayWonRounds`. Subsequent reads from it will return its default value.
      mutating func clearAwayWonRounds() {self._awayWonRounds = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _homeKills: Int32? = nil
      fileprivate var _awayKills: Int32? = nil
      fileprivate var _homeGoals: Int32? = nil
      fileprivate var _awayGoals: Int32? = nil
      fileprivate var _homeWonRounds: Int32? = nil
      fileprivate var _awayWonRounds: Int32? = nil
    }

    init() {}
  }

  init() {}

  fileprivate var _error: Bb_Error? = nil
  fileprivate var _eventResult: Bb_BetsHistoryV3GetEventResultResponse.EventResult? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bb"

extension Bb_BetsHistoryV3GetEventResultRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BetsHistoryV3GetEventResultRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "provider"),
    2: .standard(proto: "match_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.provider)
      case 2: try decoder.decodeSingularStringField(value: &self.matchID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 1)
    }
    if !self.matchID.isEmpty {
      try visitor.visitSingularStringField(value: self.matchID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_BetsHistoryV3GetEventResultRequest, rhs: Bb_BetsHistoryV3GetEventResultRequest) -> Bool {
    if lhs.provider != rhs.provider {return false}
    if lhs.matchID != rhs.matchID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_BetsHistoryV3GetEventResultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BetsHistoryV3GetEventResultResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "status"),
    3: .same(proto: "error"),
    4: .standard(proto: "event_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.status)
      case 3: try decoder.decodeSingularMessageField(value: &self._error)
      case 4: try decoder.decodeSingularMessageField(value: &self._eventResult)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 2)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._eventResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_BetsHistoryV3GetEventResultResponse, rhs: Bb_BetsHistoryV3GetEventResultResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.status != rhs.status {return false}
    if lhs._error != rhs._error {return false}
    if lhs._eventResult != rhs._eventResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_BetsHistoryV3GetEventResultResponse.EventResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bb_BetsHistoryV3GetEventResultResponse.protoMessageName + ".EventResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "sport_id"),
    3: .standard(proto: "sport_name"),
    4: .standard(proto: "tournament_id"),
    5: .standard(proto: "tournament_name"),
    6: .standard(proto: "start_dttm"),
    7: .same(proto: "score"),
    8: .same(proto: "teams"),
    9: .standard(proto: "period_scores"),
    10: .standard(proto: "favorite_period_score_properties"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.sportID)
      case 3: try decoder.decodeSingularStringField(value: &self.sportName)
      case 4: try decoder.decodeSingularStringField(value: &self.tournamentID)
      case 5: try decoder.decodeSingularStringField(value: &self.tournamentName)
      case 6: try decoder.decodeSingularStringField(value: &self.startDttm)
      case 7: try decoder.decodeSingularStringField(value: &self.score)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.teams)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.periodScores)
      case 10: try decoder.decodeSingularStringField(value: &self.favoritePeriodScoreProperties)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.sportID.isEmpty {
      try visitor.visitSingularStringField(value: self.sportID, fieldNumber: 2)
    }
    if !self.sportName.isEmpty {
      try visitor.visitSingularStringField(value: self.sportName, fieldNumber: 3)
    }
    if !self.tournamentID.isEmpty {
      try visitor.visitSingularStringField(value: self.tournamentID, fieldNumber: 4)
    }
    if !self.tournamentName.isEmpty {
      try visitor.visitSingularStringField(value: self.tournamentName, fieldNumber: 5)
    }
    if !self.startDttm.isEmpty {
      try visitor.visitSingularStringField(value: self.startDttm, fieldNumber: 6)
    }
    if !self.score.isEmpty {
      try visitor.visitSingularStringField(value: self.score, fieldNumber: 7)
    }
    if !self.teams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.teams, fieldNumber: 8)
    }
    if !self.periodScores.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.periodScores, fieldNumber: 9)
    }
    if !self.favoritePeriodScoreProperties.isEmpty {
      try visitor.visitSingularStringField(value: self.favoritePeriodScoreProperties, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_BetsHistoryV3GetEventResultResponse.EventResult, rhs: Bb_BetsHistoryV3GetEventResultResponse.EventResult) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.sportID != rhs.sportID {return false}
    if lhs.sportName != rhs.sportName {return false}
    if lhs.tournamentID != rhs.tournamentID {return false}
    if lhs.tournamentName != rhs.tournamentName {return false}
    if lhs.startDttm != rhs.startDttm {return false}
    if lhs.score != rhs.score {return false}
    if lhs.teams != rhs.teams {return false}
    if lhs.periodScores != rhs.periodScores {return false}
    if lhs.favoritePeriodScoreProperties != rhs.favoritePeriodScoreProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_BetsHistoryV3GetEventResultResponse.EventResult.Team: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bb_BetsHistoryV3GetEventResultResponse.EventResult.protoMessageName + ".Team"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "home"),
    2: .same(proto: "name"),
    3: .same(proto: "score"),
    4: .same(proto: "image"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.home)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularInt32Field(value: &self.score)
      case 4: try decoder.decodeSingularStringField(value: &self._image)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.home != false {
      try visitor.visitSingularBoolField(value: self.home, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.score != 0 {
      try visitor.visitSingularInt32Field(value: self.score, fieldNumber: 3)
    }
    if let v = self._image {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_BetsHistoryV3GetEventResultResponse.EventResult.Team, rhs: Bb_BetsHistoryV3GetEventResultResponse.EventResult.Team) -> Bool {
    if lhs.home != rhs.home {return false}
    if lhs.name != rhs.name {return false}
    if lhs.score != rhs.score {return false}
    if lhs._image != rhs._image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_BetsHistoryV3GetEventResultResponse.EventResult.PeriodScore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bb_BetsHistoryV3GetEventResultResponse.EventResult.protoMessageName + ".PeriodScore"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "number"),
    3: .standard(proto: "home_score"),
    4: .standard(proto: "away_score"),
    5: .standard(proto: "match_status"),
    6: .standard(proto: "home_kills"),
    7: .standard(proto: "away_kills"),
    8: .standard(proto: "home_goals"),
    9: .standard(proto: "away_goals"),
    10: .standard(proto: "home_won_rounds"),
    11: .standard(proto: "away_won_rounds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularInt32Field(value: &self.number)
      case 3: try decoder.decodeSingularInt32Field(value: &self.homeScore)
      case 4: try decoder.decodeSingularInt32Field(value: &self.awayScore)
      case 5: try decoder.decodeSingularStringField(value: &self.matchStatus)
      case 6: try decoder.decodeSingularInt32Field(value: &self._homeKills)
      case 7: try decoder.decodeSingularInt32Field(value: &self._awayKills)
      case 8: try decoder.decodeSingularInt32Field(value: &self._homeGoals)
      case 9: try decoder.decodeSingularInt32Field(value: &self._awayGoals)
      case 10: try decoder.decodeSingularInt32Field(value: &self._homeWonRounds)
      case 11: try decoder.decodeSingularInt32Field(value: &self._awayWonRounds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if self.number != 0 {
      try visitor.visitSingularInt32Field(value: self.number, fieldNumber: 2)
    }
    if self.homeScore != 0 {
      try visitor.visitSingularInt32Field(value: self.homeScore, fieldNumber: 3)
    }
    if self.awayScore != 0 {
      try visitor.visitSingularInt32Field(value: self.awayScore, fieldNumber: 4)
    }
    if !self.matchStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.matchStatus, fieldNumber: 5)
    }
    if let v = self._homeKills {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._awayKills {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._homeGoals {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._awayGoals {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._homeWonRounds {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._awayWonRounds {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_BetsHistoryV3GetEventResultResponse.EventResult.PeriodScore, rhs: Bb_BetsHistoryV3GetEventResultResponse.EventResult.PeriodScore) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.number != rhs.number {return false}
    if lhs.homeScore != rhs.homeScore {return false}
    if lhs.awayScore != rhs.awayScore {return false}
    if lhs.matchStatus != rhs.matchStatus {return false}
    if lhs._homeKills != rhs._homeKills {return false}
    if lhs._awayKills != rhs._awayKills {return false}
    if lhs._homeGoals != rhs._homeGoals {return false}
    if lhs._awayGoals != rhs._awayGoals {return false}
    if lhs._homeWonRounds != rhs._homeWonRounds {return false}
    if lhs._awayWonRounds != rhs._awayWonRounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
