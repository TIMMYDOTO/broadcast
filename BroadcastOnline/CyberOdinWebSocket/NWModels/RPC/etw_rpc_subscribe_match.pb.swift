// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc/rpc_subscribe_match.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bb_Mobile_OddinTreeWs_SubscribeMatchRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uid: String = String()

  var matchID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bb_Mobile_OddinTreeWs_SubscribeMatchResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var error: Bb_Mobile_OddinTreeWs_Error {
    get {return _storage._error ?? Bb_Mobile_OddinTreeWs_Error()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {_uniqueStorage()._error = nil}

  var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  var sport: Bb_Mobile_OddinTreeWs_Sport {
    get {return _storage._sport ?? Bb_Mobile_OddinTreeWs_Sport()}
    set {_uniqueStorage()._sport = newValue}
  }
  /// Returns true if `sport` has been explicitly set.
  var hasSport: Bool {return _storage._sport != nil}
  /// Clears the value of `sport`. Subsequent reads from it will return its default value.
  mutating func clearSport() {_uniqueStorage()._sport = nil}

  var tournament: Bb_Mobile_OddinTreeWs_Tournament {
    get {return _storage._tournament ?? Bb_Mobile_OddinTreeWs_Tournament()}
    set {_uniqueStorage()._tournament = newValue}
  }
  /// Returns true if `tournament` has been explicitly set.
  var hasTournament: Bool {return _storage._tournament != nil}
  /// Clears the value of `tournament`. Subsequent reads from it will return its default value.
  mutating func clearTournament() {_uniqueStorage()._tournament = nil}

  var match: Bb_Mobile_OddinTreeWs_Match {
    get {return _storage._match ?? Bb_Mobile_OddinTreeWs_Match()}
    set {_uniqueStorage()._match = newValue}
  }
  /// Returns true if `match` has been explicitly set.
  var hasMatch: Bool {return _storage._match != nil}
  /// Clears the value of `match`. Subsequent reads from it will return its default value.
  mutating func clearMatch() {_uniqueStorage()._match = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bb.mobile.oddin_tree_ws"

extension Bb_Mobile_OddinTreeWs_SubscribeMatchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeMatchRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .standard(proto: "match_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.matchID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if !self.matchID.isEmpty {
      try visitor.visitSingularStringField(value: self.matchID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_OddinTreeWs_SubscribeMatchRequest, rhs: Bb_Mobile_OddinTreeWs_SubscribeMatchRequest) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.matchID != rhs.matchID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_Mobile_OddinTreeWs_SubscribeMatchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeMatchResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "status"),
    3: .same(proto: "error"),
    4: .same(proto: "uid"),
    5: .same(proto: "sport"),
    6: .same(proto: "tournament"),
    7: .same(proto: "match"),
  ]

  fileprivate class _StorageClass {
    var _code: Int32 = 0
    var _status: String = String()
    var _error: Bb_Mobile_OddinTreeWs_Error? = nil
    var _uid: String = String()
    var _sport: Bb_Mobile_OddinTreeWs_Sport? = nil
    var _tournament: Bb_Mobile_OddinTreeWs_Tournament? = nil
    var _match: Bb_Mobile_OddinTreeWs_Match? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _code = source._code
      _status = source._status
      _error = source._error
      _uid = source._uid
      _sport = source._sport
      _tournament = source._tournament
      _match = source._match
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._code) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._status) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._error) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._sport) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._tournament) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._match) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 1)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 2)
      }
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 4)
      }
      if let v = _storage._sport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._tournament {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._match {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_OddinTreeWs_SubscribeMatchResponse, rhs: Bb_Mobile_OddinTreeWs_SubscribeMatchResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._code != rhs_storage._code {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._sport != rhs_storage._sport {return false}
        if _storage._tournament != rhs_storage._tournament {return false}
        if _storage._match != rhs_storage._match {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
