// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models/model_stake.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bb_Mobile_OddinTreeWs_Stake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var matchID: String {
    get {return _storage._matchID}
    set {_uniqueStorage()._matchID = newValue}
  }

  var active: Bool {
    get {return _storage._active}
    set {_uniqueStorage()._active = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var shortName: String {
    get {return _storage._shortName}
    set {_uniqueStorage()._shortName = newValue}
  }

  var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  var order: Int32 {
    get {return _storage._order}
    set {_uniqueStorage()._order = newValue}
  }

  var argument: Double {
    get {return _storage._argument ?? 0}
    set {_uniqueStorage()._argument = newValue}
  }
  /// Returns true if `argument` has been explicitly set.
  var hasArgument: Bool {return _storage._argument != nil}
  /// Clears the value of `argument`. Subsequent reads from it will return its default value.
  mutating func clearArgument() {_uniqueStorage()._argument = nil}

  var factor: Double {
    get {return _storage._factor}
    set {_uniqueStorage()._factor = newValue}
  }

  var isForLiveTv: Bool {
    get {return _storage._isForLiveTv}
    set {_uniqueStorage()._isForLiveTv = newValue}
  }

  var isShowSign: Bool {
    get {return _storage._isShowSign}
    set {_uniqueStorage()._isShowSign = newValue}
  }

  var stakeTypeID: String {
    get {return _storage._stakeTypeID}
    set {_uniqueStorage()._stakeTypeID = newValue}
  }

  var stakeType: String {
    get {return _storage._stakeType}
    set {_uniqueStorage()._stakeType = newValue}
  }

  var stakeTypeOrder: Int32 {
    get {return _storage._stakeTypeOrder}
    set {_uniqueStorage()._stakeTypeOrder = newValue}
  }

  var stakeTypeView: String {
    get {return _storage._stakeTypeView}
    set {_uniqueStorage()._stakeTypeView = newValue}
  }

  var typeGroupID: Int32 {
    get {return _storage._typeGroupID}
    set {_uniqueStorage()._typeGroupID = newValue}
  }

  var typeGroupName: String {
    get {return _storage._typeGroupName}
    set {_uniqueStorage()._typeGroupName = newValue}
  }

  var typeGroupOrder: Int32 {
    get {return _storage._typeGroupOrder}
    set {_uniqueStorage()._typeGroupOrder = newValue}
  }

  var periodName: String {
    get {return _storage._periodName}
    set {_uniqueStorage()._periodName = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bb.mobile.oddin_tree_ws"

extension Bb_Mobile_OddinTreeWs_Stake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Stake"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "match_id"),
    3: .same(proto: "active"),
    4: .same(proto: "name"),
    5: .standard(proto: "short_name"),
    6: .same(proto: "code"),
    7: .same(proto: "order"),
    8: .same(proto: "argument"),
    9: .same(proto: "factor"),
    10: .standard(proto: "is_for_live_tv"),
    11: .standard(proto: "is_show_sign"),
    12: .standard(proto: "stake_type_id"),
    13: .standard(proto: "stake_type"),
    14: .standard(proto: "stake_type_order"),
    15: .standard(proto: "stake_type_view"),
    16: .standard(proto: "type_group_id"),
    17: .standard(proto: "type_group_name"),
    18: .standard(proto: "type_group_order"),
    19: .standard(proto: "period_name"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _matchID: String = String()
    var _active: Bool = false
    var _name: String = String()
    var _shortName: String = String()
    var _code: Int32 = 0
    var _order: Int32 = 0
    var _argument: Double? = nil
    var _factor: Double = 0
    var _isForLiveTv: Bool = false
    var _isShowSign: Bool = false
    var _stakeTypeID: String = String()
    var _stakeType: String = String()
    var _stakeTypeOrder: Int32 = 0
    var _stakeTypeView: String = String()
    var _typeGroupID: Int32 = 0
    var _typeGroupName: String = String()
    var _typeGroupOrder: Int32 = 0
    var _periodName: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _matchID = source._matchID
      _active = source._active
      _name = source._name
      _shortName = source._shortName
      _code = source._code
      _order = source._order
      _argument = source._argument
      _factor = source._factor
      _isForLiveTv = source._isForLiveTv
      _isShowSign = source._isShowSign
      _stakeTypeID = source._stakeTypeID
      _stakeType = source._stakeType
      _stakeTypeOrder = source._stakeTypeOrder
      _stakeTypeView = source._stakeTypeView
      _typeGroupID = source._typeGroupID
      _typeGroupName = source._typeGroupName
      _typeGroupOrder = source._typeGroupOrder
      _periodName = source._periodName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._matchID) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._active) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._shortName) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._code) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._order) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._argument) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._factor) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._isForLiveTv) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isShowSign) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._stakeTypeID) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._stakeType) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._stakeTypeOrder) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._stakeTypeView) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._typeGroupID) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._typeGroupName) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._typeGroupOrder) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._periodName) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._matchID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._matchID, fieldNumber: 2)
      }
      if _storage._active != false {
        try visitor.visitSingularBoolField(value: _storage._active, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if !_storage._shortName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortName, fieldNumber: 5)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 6)
      }
      if _storage._order != 0 {
        try visitor.visitSingularInt32Field(value: _storage._order, fieldNumber: 7)
      }
      if let v = _storage._argument {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      }
      if _storage._factor != 0 {
        try visitor.visitSingularDoubleField(value: _storage._factor, fieldNumber: 9)
      }
      if _storage._isForLiveTv != false {
        try visitor.visitSingularBoolField(value: _storage._isForLiveTv, fieldNumber: 10)
      }
      if _storage._isShowSign != false {
        try visitor.visitSingularBoolField(value: _storage._isShowSign, fieldNumber: 11)
      }
      if !_storage._stakeTypeID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stakeTypeID, fieldNumber: 12)
      }
      if !_storage._stakeType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stakeType, fieldNumber: 13)
      }
      if _storage._stakeTypeOrder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stakeTypeOrder, fieldNumber: 14)
      }
      if !_storage._stakeTypeView.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stakeTypeView, fieldNumber: 15)
      }
      if _storage._typeGroupID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._typeGroupID, fieldNumber: 16)
      }
      if !_storage._typeGroupName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._typeGroupName, fieldNumber: 17)
      }
      if _storage._typeGroupOrder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._typeGroupOrder, fieldNumber: 18)
      }
      if !_storage._periodName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._periodName, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_OddinTreeWs_Stake, rhs: Bb_Mobile_OddinTreeWs_Stake) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._matchID != rhs_storage._matchID {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._shortName != rhs_storage._shortName {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._order != rhs_storage._order {return false}
        if _storage._argument != rhs_storage._argument {return false}
        if _storage._factor != rhs_storage._factor {return false}
        if _storage._isForLiveTv != rhs_storage._isForLiveTv {return false}
        if _storage._isShowSign != rhs_storage._isShowSign {return false}
        if _storage._stakeTypeID != rhs_storage._stakeTypeID {return false}
        if _storage._stakeType != rhs_storage._stakeType {return false}
        if _storage._stakeTypeOrder != rhs_storage._stakeTypeOrder {return false}
        if _storage._stakeTypeView != rhs_storage._stakeTypeView {return false}
        if _storage._typeGroupID != rhs_storage._typeGroupID {return false}
        if _storage._typeGroupName != rhs_storage._typeGroupName {return false}
        if _storage._typeGroupOrder != rhs_storage._typeGroupOrder {return false}
        if _storage._periodName != rhs_storage._periodName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
