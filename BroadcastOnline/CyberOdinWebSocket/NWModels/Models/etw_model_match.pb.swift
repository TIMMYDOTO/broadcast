// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models/model_match.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bb_Mobile_OddinTreeWs_Match {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var order: Int32 {
    get {return _storage._order}
    set {_uniqueStorage()._order = newValue}
  }

  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var active: Bool {
    get {return _storage._active}
    set {_uniqueStorage()._active = newValue}
  }

  var betStop: Bool {
    get {return _storage._betStop}
    set {_uniqueStorage()._betStop = newValue}
  }

  var sportID: String {
    get {return _storage._sportID}
    set {_uniqueStorage()._sportID = newValue}
  }

  var tournamentID: String {
    get {return _storage._tournamentID}
    set {_uniqueStorage()._tournamentID = newValue}
  }

  var matchStatus: String {
    get {return _storage._matchStatus}
    set {_uniqueStorage()._matchStatus = newValue}
  }

  var startDttm: String {
    get {return _storage._startDttm}
    set {_uniqueStorage()._startDttm = newValue}
  }

  var stakesCount: Int32 {
    get {return _storage._stakesCount}
    set {_uniqueStorage()._stakesCount = newValue}
  }

  var isScoreboardAvailable: Bool {
    get {return _storage._isScoreboardAvailable}
    set {_uniqueStorage()._isScoreboardAvailable = newValue}
  }

  var scoreboard: Bb_Mobile_OddinTreeWs_Match.Scoreboard {
    get {return _storage._scoreboard ?? Bb_Mobile_OddinTreeWs_Match.Scoreboard()}
    set {_uniqueStorage()._scoreboard = newValue}
  }
  /// Returns true if `scoreboard` has been explicitly set.
  var hasScoreboard: Bool {return _storage._scoreboard != nil}
  /// Clears the value of `scoreboard`. Subsequent reads from it will return its default value.
  mutating func clearScoreboard() {_uniqueStorage()._scoreboard = nil}

  var stream: Bb_Mobile_OddinTreeWs_Match.Stream {
    get {return _storage._stream ?? Bb_Mobile_OddinTreeWs_Match.Stream()}
    set {_uniqueStorage()._stream = newValue}
  }
  /// Returns true if `stream` has been explicitly set.
  var hasStream: Bool {return _storage._stream != nil}
  /// Clears the value of `stream`. Subsequent reads from it will return its default value.
  mutating func clearStream() {_uniqueStorage()._stream = nil}

  var teams: [Bb_Mobile_OddinTreeWs_Match.Team] {
    get {return _storage._teams}
    set {_uniqueStorage()._teams = newValue}
  }

  var periodScores: [Bb_Mobile_OddinTreeWs_Match.PeriodScore] {
    get {return _storage._periodScores}
    set {_uniqueStorage()._periodScores = newValue}
  }

  var stakes: [Bb_Mobile_OddinTreeWs_Stake] {
    get {return _storage._stakes}
    set {_uniqueStorage()._stakes = newValue}
  }

  var favoritePeriodScoreProperties: String {
    get {return _storage._favoritePeriodScoreProperties}
    set {_uniqueStorage()._favoritePeriodScoreProperties = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Scoreboard {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var currentCtTeam: String {
      get {return _currentCtTeam ?? String()}
      set {_currentCtTeam = newValue}
    }
    /// Returns true if `currentCtTeam` has been explicitly set.
    var hasCurrentCtTeam: Bool {return self._currentCtTeam != nil}
    /// Clears the value of `currentCtTeam`. Subsequent reads from it will return its default value.
    mutating func clearCurrentCtTeam() {self._currentCtTeam = nil}

    var currentRound: Int32 {
      get {return _currentRound ?? 0}
      set {_currentRound = newValue}
    }
    /// Returns true if `currentRound` has been explicitly set.
    var hasCurrentRound: Bool {return self._currentRound != nil}
    /// Clears the value of `currentRound`. Subsequent reads from it will return its default value.
    mutating func clearCurrentRound() {self._currentRound = nil}

    var homeDestroyedTowers: Int32 {
      get {return _homeDestroyedTowers ?? 0}
      set {_homeDestroyedTowers = newValue}
    }
    /// Returns true if `homeDestroyedTowers` has been explicitly set.
    var hasHomeDestroyedTowers: Bool {return self._homeDestroyedTowers != nil}
    /// Clears the value of `homeDestroyedTowers`. Subsequent reads from it will return its default value.
    mutating func clearHomeDestroyedTowers() {self._homeDestroyedTowers = nil}

    var awayDestroyedTowers: Int32 {
      get {return _awayDestroyedTowers ?? 0}
      set {_awayDestroyedTowers = newValue}
    }
    /// Returns true if `awayDestroyedTowers` has been explicitly set.
    var hasAwayDestroyedTowers: Bool {return self._awayDestroyedTowers != nil}
    /// Clears the value of `awayDestroyedTowers`. Subsequent reads from it will return its default value.
    mutating func clearAwayDestroyedTowers() {self._awayDestroyedTowers = nil}

    var homeDestroyedTurrets: Int32 {
      get {return _homeDestroyedTurrets ?? 0}
      set {_homeDestroyedTurrets = newValue}
    }
    /// Returns true if `homeDestroyedTurrets` has been explicitly set.
    var hasHomeDestroyedTurrets: Bool {return self._homeDestroyedTurrets != nil}
    /// Clears the value of `homeDestroyedTurrets`. Subsequent reads from it will return its default value.
    mutating func clearHomeDestroyedTurrets() {self._homeDestroyedTurrets = nil}

    var awayDestroyedTurrets: Int32 {
      get {return _awayDestroyedTurrets ?? 0}
      set {_awayDestroyedTurrets = newValue}
    }
    /// Returns true if `awayDestroyedTurrets` has been explicitly set.
    var hasAwayDestroyedTurrets: Bool {return self._awayDestroyedTurrets != nil}
    /// Clears the value of `awayDestroyedTurrets`. Subsequent reads from it will return its default value.
    mutating func clearAwayDestroyedTurrets() {self._awayDestroyedTurrets = nil}

    var homeGold: Int32 {
      get {return _homeGold ?? 0}
      set {_homeGold = newValue}
    }
    /// Returns true if `homeGold` has been explicitly set.
    var hasHomeGold: Bool {return self._homeGold != nil}
    /// Clears the value of `homeGold`. Subsequent reads from it will return its default value.
    mutating func clearHomeGold() {self._homeGold = nil}

    var awayGold: Int32 {
      get {return _awayGold ?? 0}
      set {_awayGold = newValue}
    }
    /// Returns true if `awayGold` has been explicitly set.
    var hasAwayGold: Bool {return self._awayGold != nil}
    /// Clears the value of `awayGold`. Subsequent reads from it will return its default value.
    mutating func clearAwayGold() {self._awayGold = nil}

    var homeKills: Int32 {
      get {return _homeKills ?? 0}
      set {_homeKills = newValue}
    }
    /// Returns true if `homeKills` has been explicitly set.
    var hasHomeKills: Bool {return self._homeKills != nil}
    /// Clears the value of `homeKills`. Subsequent reads from it will return its default value.
    mutating func clearHomeKills() {self._homeKills = nil}

    var awayKills: Int32 {
      get {return _awayKills ?? 0}
      set {_awayKills = newValue}
    }
    /// Returns true if `awayKills` has been explicitly set.
    var hasAwayKills: Bool {return self._awayKills != nil}
    /// Clears the value of `awayKills`. Subsequent reads from it will return its default value.
    mutating func clearAwayKills() {self._awayKills = nil}

    var homeWonRounds: Int32 {
      get {return _homeWonRounds ?? 0}
      set {_homeWonRounds = newValue}
    }
    /// Returns true if `homeWonRounds` has been explicitly set.
    var hasHomeWonRounds: Bool {return self._homeWonRounds != nil}
    /// Clears the value of `homeWonRounds`. Subsequent reads from it will return its default value.
    mutating func clearHomeWonRounds() {self._homeWonRounds = nil}

    var awayWonRounds: Int32 {
      get {return _awayWonRounds ?? 0}
      set {_awayWonRounds = newValue}
    }
    /// Returns true if `awayWonRounds` has been explicitly set.
    var hasAwayWonRounds: Bool {return self._awayWonRounds != nil}
    /// Clears the value of `awayWonRounds`. Subsequent reads from it will return its default value.
    mutating func clearAwayWonRounds() {self._awayWonRounds = nil}

    var homeGoals: Int32 {
      get {return _homeGoals ?? 0}
      set {_homeGoals = newValue}
    }
    /// Returns true if `homeGoals` has been explicitly set.
    var hasHomeGoals: Bool {return self._homeGoals != nil}
    /// Clears the value of `homeGoals`. Subsequent reads from it will return its default value.
    mutating func clearHomeGoals() {self._homeGoals = nil}

    var awayGoals: Int32 {
      get {return _awayGoals ?? 0}
      set {_awayGoals = newValue}
    }
    /// Returns true if `awayGoals` has been explicitly set.
    var hasAwayGoals: Bool {return self._awayGoals != nil}
    /// Clears the value of `awayGoals`. Subsequent reads from it will return its default value.
    mutating func clearAwayGoals() {self._awayGoals = nil}

    var favoriteProperties: String {
      get {return _favoriteProperties ?? String()}
      set {_favoriteProperties = newValue}
    }
    /// Returns true if `favoriteProperties` has been explicitly set.
    var hasFavoriteProperties: Bool {return self._favoriteProperties != nil}
    /// Clears the value of `favoriteProperties`. Subsequent reads from it will return its default value.
    mutating func clearFavoriteProperties() {self._favoriteProperties = nil}

    var isVisible: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _currentCtTeam: String? = nil
    fileprivate var _currentRound: Int32? = nil
    fileprivate var _homeDestroyedTowers: Int32? = nil
    fileprivate var _awayDestroyedTowers: Int32? = nil
    fileprivate var _homeDestroyedTurrets: Int32? = nil
    fileprivate var _awayDestroyedTurrets: Int32? = nil
    fileprivate var _homeGold: Int32? = nil
    fileprivate var _awayGold: Int32? = nil
    fileprivate var _homeKills: Int32? = nil
    fileprivate var _awayKills: Int32? = nil
    fileprivate var _homeWonRounds: Int32? = nil
    fileprivate var _awayWonRounds: Int32? = nil
    fileprivate var _homeGoals: Int32? = nil
    fileprivate var _awayGoals: Int32? = nil
    fileprivate var _favoriteProperties: String? = nil
  }

  struct Stream {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var streamURL: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Team {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var home: Bool = false

    var name: String = String()

    var score: Int32 = 0

    var image: String = String()

    var abbreviation: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PeriodScore {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: String = String()

    var number: Int32 = 0

    var matchStatus: String = String()

    var homeKills: Int32 {
      get {return _homeKills ?? 0}
      set {_homeKills = newValue}
    }
    /// Returns true if `homeKills` has been explicitly set.
    var hasHomeKills: Bool {return self._homeKills != nil}
    /// Clears the value of `homeKills`. Subsequent reads from it will return its default value.
    mutating func clearHomeKills() {self._homeKills = nil}

    var awayKills: Int32 {
      get {return _awayKills ?? 0}
      set {_awayKills = newValue}
    }
    /// Returns true if `awayKills` has been explicitly set.
    var hasAwayKills: Bool {return self._awayKills != nil}
    /// Clears the value of `awayKills`. Subsequent reads from it will return its default value.
    mutating func clearAwayKills() {self._awayKills = nil}

    var homeScore: Int32 {
      get {return _homeScore ?? 0}
      set {_homeScore = newValue}
    }
    /// Returns true if `homeScore` has been explicitly set.
    var hasHomeScore: Bool {return self._homeScore != nil}
    /// Clears the value of `homeScore`. Subsequent reads from it will return its default value.
    mutating func clearHomeScore() {self._homeScore = nil}

    var awayScore: Int32 {
      get {return _awayScore ?? 0}
      set {_awayScore = newValue}
    }
    /// Returns true if `awayScore` has been explicitly set.
    var hasAwayScore: Bool {return self._awayScore != nil}
    /// Clears the value of `awayScore`. Subsequent reads from it will return its default value.
    mutating func clearAwayScore() {self._awayScore = nil}

    var homeWonRounds: Int32 {
      get {return _homeWonRounds ?? 0}
      set {_homeWonRounds = newValue}
    }
    /// Returns true if `homeWonRounds` has been explicitly set.
    var hasHomeWonRounds: Bool {return self._homeWonRounds != nil}
    /// Clears the value of `homeWonRounds`. Subsequent reads from it will return its default value.
    mutating func clearHomeWonRounds() {self._homeWonRounds = nil}

    var awayWonRounds: Int32 {
      get {return _awayWonRounds ?? 0}
      set {_awayWonRounds = newValue}
    }
    /// Returns true if `awayWonRounds` has been explicitly set.
    var hasAwayWonRounds: Bool {return self._awayWonRounds != nil}
    /// Clears the value of `awayWonRounds`. Subsequent reads from it will return its default value.
    mutating func clearAwayWonRounds() {self._awayWonRounds = nil}

    var homeGoals: Int32 {
      get {return _homeGoals ?? 0}
      set {_homeGoals = newValue}
    }
    /// Returns true if `homeGoals` has been explicitly set.
    var hasHomeGoals: Bool {return self._homeGoals != nil}
    /// Clears the value of `homeGoals`. Subsequent reads from it will return its default value.
    mutating func clearHomeGoals() {self._homeGoals = nil}

    var awayGoals: Int32 {
      get {return _awayGoals ?? 0}
      set {_awayGoals = newValue}
    }
    /// Returns true if `awayGoals` has been explicitly set.
    var hasAwayGoals: Bool {return self._awayGoals != nil}
    /// Clears the value of `awayGoals`. Subsequent reads from it will return its default value.
    mutating func clearAwayGoals() {self._awayGoals = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _homeKills: Int32? = nil
    fileprivate var _awayKills: Int32? = nil
    fileprivate var _homeScore: Int32? = nil
    fileprivate var _awayScore: Int32? = nil
    fileprivate var _homeWonRounds: Int32? = nil
    fileprivate var _awayWonRounds: Int32? = nil
    fileprivate var _homeGoals: Int32? = nil
    fileprivate var _awayGoals: Int32? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bb.mobile.oddin_tree_ws"

extension Bb_Mobile_OddinTreeWs_Match: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Match"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "order"),
    3: .same(proto: "type"),
    4: .same(proto: "active"),
    5: .standard(proto: "bet_stop"),
    6: .standard(proto: "sport_id"),
    7: .standard(proto: "tournament_id"),
    8: .standard(proto: "match_status"),
    9: .standard(proto: "start_dttm"),
    10: .standard(proto: "stakes_count"),
    11: .standard(proto: "is_scoreboard_available"),
    12: .same(proto: "scoreboard"),
    13: .same(proto: "stream"),
    14: .same(proto: "teams"),
    15: .standard(proto: "period_scores"),
    16: .same(proto: "stakes"),
    17: .standard(proto: "favorite_period_score_properties"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _order: Int32 = 0
    var _type: String = String()
    var _active: Bool = false
    var _betStop: Bool = false
    var _sportID: String = String()
    var _tournamentID: String = String()
    var _matchStatus: String = String()
    var _startDttm: String = String()
    var _stakesCount: Int32 = 0
    var _isScoreboardAvailable: Bool = false
    var _scoreboard: Bb_Mobile_OddinTreeWs_Match.Scoreboard? = nil
    var _stream: Bb_Mobile_OddinTreeWs_Match.Stream? = nil
    var _teams: [Bb_Mobile_OddinTreeWs_Match.Team] = []
    var _periodScores: [Bb_Mobile_OddinTreeWs_Match.PeriodScore] = []
    var _stakes: [Bb_Mobile_OddinTreeWs_Stake] = []
    var _favoritePeriodScoreProperties: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _order = source._order
      _type = source._type
      _active = source._active
      _betStop = source._betStop
      _sportID = source._sportID
      _tournamentID = source._tournamentID
      _matchStatus = source._matchStatus
      _startDttm = source._startDttm
      _stakesCount = source._stakesCount
      _isScoreboardAvailable = source._isScoreboardAvailable
      _scoreboard = source._scoreboard
      _stream = source._stream
      _teams = source._teams
      _periodScores = source._periodScores
      _stakes = source._stakes
      _favoritePeriodScoreProperties = source._favoritePeriodScoreProperties
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._order) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._active) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._betStop) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._sportID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._tournamentID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._matchStatus) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._startDttm) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._stakesCount) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isScoreboardAvailable) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._scoreboard) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._stream) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._teams) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._periodScores) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._stakes) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._favoritePeriodScoreProperties) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._order != 0 {
        try visitor.visitSingularInt32Field(value: _storage._order, fieldNumber: 2)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 3)
      }
      if _storage._active != false {
        try visitor.visitSingularBoolField(value: _storage._active, fieldNumber: 4)
      }
      if _storage._betStop != false {
        try visitor.visitSingularBoolField(value: _storage._betStop, fieldNumber: 5)
      }
      if !_storage._sportID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sportID, fieldNumber: 6)
      }
      if !_storage._tournamentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tournamentID, fieldNumber: 7)
      }
      if !_storage._matchStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._matchStatus, fieldNumber: 8)
      }
      if !_storage._startDttm.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startDttm, fieldNumber: 9)
      }
      if _storage._stakesCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stakesCount, fieldNumber: 10)
      }
      if _storage._isScoreboardAvailable != false {
        try visitor.visitSingularBoolField(value: _storage._isScoreboardAvailable, fieldNumber: 11)
      }
      if let v = _storage._scoreboard {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._stream {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._teams.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._teams, fieldNumber: 14)
      }
      if !_storage._periodScores.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._periodScores, fieldNumber: 15)
      }
      if !_storage._stakes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stakes, fieldNumber: 16)
      }
      if !_storage._favoritePeriodScoreProperties.isEmpty {
        try visitor.visitSingularStringField(value: _storage._favoritePeriodScoreProperties, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_OddinTreeWs_Match, rhs: Bb_Mobile_OddinTreeWs_Match) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._order != rhs_storage._order {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._betStop != rhs_storage._betStop {return false}
        if _storage._sportID != rhs_storage._sportID {return false}
        if _storage._tournamentID != rhs_storage._tournamentID {return false}
        if _storage._matchStatus != rhs_storage._matchStatus {return false}
        if _storage._startDttm != rhs_storage._startDttm {return false}
        if _storage._stakesCount != rhs_storage._stakesCount {return false}
        if _storage._isScoreboardAvailable != rhs_storage._isScoreboardAvailable {return false}
        if _storage._scoreboard != rhs_storage._scoreboard {return false}
        if _storage._stream != rhs_storage._stream {return false}
        if _storage._teams != rhs_storage._teams {return false}
        if _storage._periodScores != rhs_storage._periodScores {return false}
        if _storage._stakes != rhs_storage._stakes {return false}
        if _storage._favoritePeriodScoreProperties != rhs_storage._favoritePeriodScoreProperties {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_Mobile_OddinTreeWs_Match.Scoreboard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bb_Mobile_OddinTreeWs_Match.protoMessageName + ".Scoreboard"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_ct_team"),
    2: .standard(proto: "current_round"),
    3: .standard(proto: "home_destroyed_towers"),
    4: .standard(proto: "away_destroyed_towers"),
    5: .standard(proto: "home_destroyed_turrets"),
    6: .standard(proto: "away_destroyed_turrets"),
    7: .standard(proto: "home_gold"),
    8: .standard(proto: "away_gold"),
    9: .standard(proto: "home_kills"),
    10: .standard(proto: "away_kills"),
    11: .standard(proto: "home_won_rounds"),
    12: .standard(proto: "away_won_rounds"),
    13: .standard(proto: "home_goals"),
    14: .standard(proto: "away_goals"),
    15: .standard(proto: "favorite_properties"),
    16: .standard(proto: "is_visible"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._currentCtTeam) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._currentRound) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._homeDestroyedTowers) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._awayDestroyedTowers) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._homeDestroyedTurrets) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._awayDestroyedTurrets) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._homeGold) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._awayGold) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self._homeKills) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self._awayKills) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self._homeWonRounds) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self._awayWonRounds) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self._homeGoals) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self._awayGoals) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self._favoriteProperties) }()
      case 16: try { try decoder.decodeSingularBoolField(value: &self.isVisible) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._currentCtTeam {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._currentRound {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._homeDestroyedTowers {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._awayDestroyedTowers {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._homeDestroyedTurrets {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._awayDestroyedTurrets {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._homeGold {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._awayGold {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._homeKills {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._awayKills {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._homeWonRounds {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
    }
    if let v = self._awayWonRounds {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
    }
    if let v = self._homeGoals {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
    }
    if let v = self._awayGoals {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
    }
    if let v = self._favoriteProperties {
      try visitor.visitSingularStringField(value: v, fieldNumber: 15)
    }
    if self.isVisible != false {
      try visitor.visitSingularBoolField(value: self.isVisible, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_OddinTreeWs_Match.Scoreboard, rhs: Bb_Mobile_OddinTreeWs_Match.Scoreboard) -> Bool {
    if lhs._currentCtTeam != rhs._currentCtTeam {return false}
    if lhs._currentRound != rhs._currentRound {return false}
    if lhs._homeDestroyedTowers != rhs._homeDestroyedTowers {return false}
    if lhs._awayDestroyedTowers != rhs._awayDestroyedTowers {return false}
    if lhs._homeDestroyedTurrets != rhs._homeDestroyedTurrets {return false}
    if lhs._awayDestroyedTurrets != rhs._awayDestroyedTurrets {return false}
    if lhs._homeGold != rhs._homeGold {return false}
    if lhs._awayGold != rhs._awayGold {return false}
    if lhs._homeKills != rhs._homeKills {return false}
    if lhs._awayKills != rhs._awayKills {return false}
    if lhs._homeWonRounds != rhs._homeWonRounds {return false}
    if lhs._awayWonRounds != rhs._awayWonRounds {return false}
    if lhs._homeGoals != rhs._homeGoals {return false}
    if lhs._awayGoals != rhs._awayGoals {return false}
    if lhs._favoriteProperties != rhs._favoriteProperties {return false}
    if lhs.isVisible != rhs.isVisible {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_Mobile_OddinTreeWs_Match.Stream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bb_Mobile_OddinTreeWs_Match.protoMessageName + ".Stream"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "stream_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.streamURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.streamURL.isEmpty {
      try visitor.visitSingularStringField(value: self.streamURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_OddinTreeWs_Match.Stream, rhs: Bb_Mobile_OddinTreeWs_Match.Stream) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.streamURL != rhs.streamURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_Mobile_OddinTreeWs_Match.Team: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bb_Mobile_OddinTreeWs_Match.protoMessageName + ".Team"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "home"),
    2: .same(proto: "name"),
    3: .same(proto: "score"),
    4: .same(proto: "image"),
    5: .same(proto: "abbreviation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.home) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.score) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.image) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.abbreviation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.home != false {
      try visitor.visitSingularBoolField(value: self.home, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.score != 0 {
      try visitor.visitSingularInt32Field(value: self.score, fieldNumber: 3)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 4)
    }
    if !self.abbreviation.isEmpty {
      try visitor.visitSingularStringField(value: self.abbreviation, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_OddinTreeWs_Match.Team, rhs: Bb_Mobile_OddinTreeWs_Match.Team) -> Bool {
    if lhs.home != rhs.home {return false}
    if lhs.name != rhs.name {return false}
    if lhs.score != rhs.score {return false}
    if lhs.image != rhs.image {return false}
    if lhs.abbreviation != rhs.abbreviation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_Mobile_OddinTreeWs_Match.PeriodScore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bb_Mobile_OddinTreeWs_Match.protoMessageName + ".PeriodScore"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "number"),
    3: .standard(proto: "match_status"),
    4: .standard(proto: "home_kills"),
    5: .standard(proto: "away_kills"),
    6: .standard(proto: "home_score"),
    7: .standard(proto: "away_score"),
    8: .standard(proto: "home_won_rounds"),
    9: .standard(proto: "away_won_rounds"),
    10: .standard(proto: "home_goals"),
    11: .standard(proto: "away_goals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.number) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.matchStatus) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._homeKills) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._awayKills) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._homeScore) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._awayScore) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._homeWonRounds) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self._awayWonRounds) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self._homeGoals) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self._awayGoals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if self.number != 0 {
      try visitor.visitSingularInt32Field(value: self.number, fieldNumber: 2)
    }
    if !self.matchStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.matchStatus, fieldNumber: 3)
    }
    if let v = self._homeKills {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._awayKills {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._homeScore {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._awayScore {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._homeWonRounds {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._awayWonRounds {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._homeGoals {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._awayGoals {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_OddinTreeWs_Match.PeriodScore, rhs: Bb_Mobile_OddinTreeWs_Match.PeriodScore) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.number != rhs.number {return false}
    if lhs.matchStatus != rhs.matchStatus {return false}
    if lhs._homeKills != rhs._homeKills {return false}
    if lhs._awayKills != rhs._awayKills {return false}
    if lhs._homeScore != rhs._homeScore {return false}
    if lhs._awayScore != rhs._awayScore {return false}
    if lhs._homeWonRounds != rhs._homeWonRounds {return false}
    if lhs._awayWonRounds != rhs._awayWonRounds {return false}
    if lhs._homeGoals != rhs._homeGoals {return false}
    if lhs._awayGoals != rhs._awayGoals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
