// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models/match.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bb_Mobile_SportTreeWs_Match {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var parentID: Int32 {
    get {return _storage._parentID}
    set {_uniqueStorage()._parentID = newValue}
  }

  var order: Int32 {
    get {return _storage._order}
    set {_uniqueStorage()._order = newValue}
  }

  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var active: Bool {
    get {return _storage._active}
    set {_uniqueStorage()._active = newValue}
  }

  var betStop: Bool {
    get {return _storage._betStop}
    set {_uniqueStorage()._betStop = newValue}
  }

  var sportID: Int32 {
    get {return _storage._sportID}
    set {_uniqueStorage()._sportID = newValue}
  }

  var sportGid: String {
    get {return _storage._sportGid}
    set {_uniqueStorage()._sportGid = newValue}
  }

  var championshipID: Int32 {
    get {return _storage._championshipID}
    set {_uniqueStorage()._championshipID = newValue}
  }

  var championshipGid: String {
    get {return _storage._championshipGid}
    set {_uniqueStorage()._championshipGid = newValue}
  }

  var tournamentID: Int32 {
    get {return _storage._tournamentID}
    set {_uniqueStorage()._tournamentID = newValue}
  }

  var tournamentGid: String {
    get {return _storage._tournamentGid}
    set {_uniqueStorage()._tournamentGid = newValue}
  }

  var matchTime: Int32 {
    get {return _storage._matchTime}
    set {_uniqueStorage()._matchTime = newValue}
  }

  var matchStatus: String {
    get {return _storage._matchStatus}
    set {_uniqueStorage()._matchStatus = newValue}
  }

  var startDttm: String {
    get {return _storage._startDttm}
    set {_uniqueStorage()._startDttm = newValue}
  }

  var score: String {
    get {return _storage._score}
    set {_uniqueStorage()._score = newValue}
  }

  var stakesCount: Int32 {
    get {return _storage._stakesCount}
    set {_uniqueStorage()._stakesCount = newValue}
  }

  var hasLiveTv_p: Bool {
    get {return _storage._hasLiveTv_p}
    set {_uniqueStorage()._hasLiveTv_p = newValue}
  }

  var hasLiveInfo_p: Bool {
    get {return _storage._hasLiveInfo_p}
    set {_uniqueStorage()._hasLiveInfo_p = newValue}
  }

  var hasGameScore_p: Bool {
    get {return _storage._hasGameScore_p}
    set {_uniqueStorage()._hasGameScore_p = newValue}
  }

  var unite: Bool {
    get {return _storage._unite}
    set {_uniqueStorage()._unite = newValue}
  }

  var teams: [Bb_Mobile_SportTreeWs_Match.Team] {
    get {return _storage._teams}
    set {_uniqueStorage()._teams = newValue}
  }

  var stakes: [Bb_Mobile_SportTreeWs_Stake] {
    get {return _storage._stakes}
    set {_uniqueStorage()._stakes = newValue}
  }

  var periodID: Int32 {
    get {return _storage._periodID}
    set {_uniqueStorage()._periodID = newValue}
  }

  var currentGamePart: Int32 {
    get {return _storage._currentGamePart}
    set {_uniqueStorage()._currentGamePart = newValue}
  }

  var comment: String {
    get {return _storage._comment}
    set {_uniqueStorage()._comment = newValue}
  }

  var playersCounts: String {
    get {return _storage._playersCounts}
    set {_uniqueStorage()._playersCounts = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Team {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var home: Bool = false

    var name: String = String()

    var score: Int32 = 0

    var gameScore: Int32 = 0

    var isServing: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bb.mobile.sport_tree_ws"

extension Bb_Mobile_SportTreeWs_Match: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Match"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "parent_id"),
    3: .same(proto: "order"),
    4: .same(proto: "type"),
    5: .same(proto: "name"),
    6: .same(proto: "active"),
    7: .standard(proto: "bet_stop"),
    8: .standard(proto: "sport_id"),
    9: .standard(proto: "sport_gid"),
    10: .standard(proto: "championship_id"),
    11: .standard(proto: "championship_gid"),
    12: .standard(proto: "tournament_id"),
    13: .standard(proto: "tournament_gid"),
    14: .standard(proto: "match_time"),
    15: .standard(proto: "match_status"),
    16: .standard(proto: "start_dttm"),
    17: .same(proto: "score"),
    18: .standard(proto: "stakes_count"),
    19: .standard(proto: "has_live_tv"),
    20: .standard(proto: "has_live_info"),
    21: .standard(proto: "has_game_score"),
    22: .same(proto: "unite"),
    23: .same(proto: "teams"),
    24: .same(proto: "stakes"),
    25: .standard(proto: "period_id"),
    26: .standard(proto: "current_game_part"),
    27: .same(proto: "comment"),
    28: .standard(proto: "players_counts"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _parentID: Int32 = 0
    var _order: Int32 = 0
    var _type: String = String()
    var _name: String = String()
    var _active: Bool = false
    var _betStop: Bool = false
    var _sportID: Int32 = 0
    var _sportGid: String = String()
    var _championshipID: Int32 = 0
    var _championshipGid: String = String()
    var _tournamentID: Int32 = 0
    var _tournamentGid: String = String()
    var _matchTime: Int32 = 0
    var _matchStatus: String = String()
    var _startDttm: String = String()
    var _score: String = String()
    var _stakesCount: Int32 = 0
    var _hasLiveTv_p: Bool = false
    var _hasLiveInfo_p: Bool = false
    var _hasGameScore_p: Bool = false
    var _unite: Bool = false
    var _teams: [Bb_Mobile_SportTreeWs_Match.Team] = []
    var _stakes: [Bb_Mobile_SportTreeWs_Stake] = []
    var _periodID: Int32 = 0
    var _currentGamePart: Int32 = 0
    var _comment: String = String()
    var _playersCounts: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _parentID = source._parentID
      _order = source._order
      _type = source._type
      _name = source._name
      _active = source._active
      _betStop = source._betStop
      _sportID = source._sportID
      _sportGid = source._sportGid
      _championshipID = source._championshipID
      _championshipGid = source._championshipGid
      _tournamentID = source._tournamentID
      _tournamentGid = source._tournamentGid
      _matchTime = source._matchTime
      _matchStatus = source._matchStatus
      _startDttm = source._startDttm
      _score = source._score
      _stakesCount = source._stakesCount
      _hasLiveTv_p = source._hasLiveTv_p
      _hasLiveInfo_p = source._hasLiveInfo_p
      _hasGameScore_p = source._hasGameScore_p
      _unite = source._unite
      _teams = source._teams
      _stakes = source._stakes
      _periodID = source._periodID
      _currentGamePart = source._currentGamePart
      _comment = source._comment
      _playersCounts = source._playersCounts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._parentID) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._order) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._active) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._betStop) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._sportID) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._sportGid) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._championshipID) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._championshipGid) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._tournamentID) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._tournamentGid) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._matchTime) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._matchStatus) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._startDttm) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._score) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._stakesCount) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._hasLiveTv_p) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._hasLiveInfo_p) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._hasGameScore_p) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._unite) }()
        case 23: try { try decoder.decodeRepeatedMessageField(value: &_storage._teams) }()
        case 24: try { try decoder.decodeRepeatedMessageField(value: &_storage._stakes) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._periodID) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._currentGamePart) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._comment) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._playersCounts) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._parentID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._parentID, fieldNumber: 2)
      }
      if _storage._order != 0 {
        try visitor.visitSingularInt32Field(value: _storage._order, fieldNumber: 3)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 4)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 5)
      }
      if _storage._active != false {
        try visitor.visitSingularBoolField(value: _storage._active, fieldNumber: 6)
      }
      if _storage._betStop != false {
        try visitor.visitSingularBoolField(value: _storage._betStop, fieldNumber: 7)
      }
      if _storage._sportID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sportID, fieldNumber: 8)
      }
      if !_storage._sportGid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sportGid, fieldNumber: 9)
      }
      if _storage._championshipID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._championshipID, fieldNumber: 10)
      }
      if !_storage._championshipGid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._championshipGid, fieldNumber: 11)
      }
      if _storage._tournamentID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._tournamentID, fieldNumber: 12)
      }
      if !_storage._tournamentGid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tournamentGid, fieldNumber: 13)
      }
      if _storage._matchTime != 0 {
        try visitor.visitSingularInt32Field(value: _storage._matchTime, fieldNumber: 14)
      }
      if !_storage._matchStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._matchStatus, fieldNumber: 15)
      }
      if !_storage._startDttm.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startDttm, fieldNumber: 16)
      }
      if !_storage._score.isEmpty {
        try visitor.visitSingularStringField(value: _storage._score, fieldNumber: 17)
      }
      if _storage._stakesCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stakesCount, fieldNumber: 18)
      }
      if _storage._hasLiveTv_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasLiveTv_p, fieldNumber: 19)
      }
      if _storage._hasLiveInfo_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasLiveInfo_p, fieldNumber: 20)
      }
      if _storage._hasGameScore_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasGameScore_p, fieldNumber: 21)
      }
      if _storage._unite != false {
        try visitor.visitSingularBoolField(value: _storage._unite, fieldNumber: 22)
      }
      if !_storage._teams.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._teams, fieldNumber: 23)
      }
      if !_storage._stakes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stakes, fieldNumber: 24)
      }
      if _storage._periodID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._periodID, fieldNumber: 25)
      }
      if _storage._currentGamePart != 0 {
        try visitor.visitSingularInt32Field(value: _storage._currentGamePart, fieldNumber: 26)
      }
      if !_storage._comment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._comment, fieldNumber: 27)
      }
      if !_storage._playersCounts.isEmpty {
        try visitor.visitSingularStringField(value: _storage._playersCounts, fieldNumber: 28)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_SportTreeWs_Match, rhs: Bb_Mobile_SportTreeWs_Match) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._parentID != rhs_storage._parentID {return false}
        if _storage._order != rhs_storage._order {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._betStop != rhs_storage._betStop {return false}
        if _storage._sportID != rhs_storage._sportID {return false}
        if _storage._sportGid != rhs_storage._sportGid {return false}
        if _storage._championshipID != rhs_storage._championshipID {return false}
        if _storage._championshipGid != rhs_storage._championshipGid {return false}
        if _storage._tournamentID != rhs_storage._tournamentID {return false}
        if _storage._tournamentGid != rhs_storage._tournamentGid {return false}
        if _storage._matchTime != rhs_storage._matchTime {return false}
        if _storage._matchStatus != rhs_storage._matchStatus {return false}
        if _storage._startDttm != rhs_storage._startDttm {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._stakesCount != rhs_storage._stakesCount {return false}
        if _storage._hasLiveTv_p != rhs_storage._hasLiveTv_p {return false}
        if _storage._hasLiveInfo_p != rhs_storage._hasLiveInfo_p {return false}
        if _storage._hasGameScore_p != rhs_storage._hasGameScore_p {return false}
        if _storage._unite != rhs_storage._unite {return false}
        if _storage._teams != rhs_storage._teams {return false}
        if _storage._stakes != rhs_storage._stakes {return false}
        if _storage._periodID != rhs_storage._periodID {return false}
        if _storage._currentGamePart != rhs_storage._currentGamePart {return false}
        if _storage._comment != rhs_storage._comment {return false}
        if _storage._playersCounts != rhs_storage._playersCounts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_Mobile_SportTreeWs_Match.Team: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bb_Mobile_SportTreeWs_Match.protoMessageName + ".Team"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "home"),
    2: .same(proto: "name"),
    3: .same(proto: "score"),
    4: .standard(proto: "game_score"),
    5: .standard(proto: "is_serving"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.home) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.score) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.gameScore) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isServing) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.home != false {
      try visitor.visitSingularBoolField(value: self.home, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.score != 0 {
      try visitor.visitSingularInt32Field(value: self.score, fieldNumber: 3)
    }
    if self.gameScore != 0 {
      try visitor.visitSingularInt32Field(value: self.gameScore, fieldNumber: 4)
    }
    if self.isServing != false {
      try visitor.visitSingularBoolField(value: self.isServing, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_Mobile_SportTreeWs_Match.Team, rhs: Bb_Mobile_SportTreeWs_Match.Team) -> Bool {
    if lhs.home != rhs.home {return false}
    if lhs.name != rhs.name {return false}
    if lhs.score != rhs.score {return false}
    if lhs.gameScore != rhs.gameScore {return false}
    if lhs.isServing != rhs.isServing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
