// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ios_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bb_IosVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: String = String()

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bb_IosConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var versionFile: String = String()

  var prodNamespace: String = String()

  var prodSchemes: [String] = []

  var testNamespaceSuffix: String = String()

  var apiURL: String = String()

  var mobileAppWsURL: String = String()

  var sportTreeWsURL: String = String()

  var oddinTreeWsURL: String = String()

  var sportradarURL: String = String()

  var iosVersion: Bb_IosVersion {
    get {return _iosVersion ?? Bb_IosVersion()}
    set {_iosVersion = newValue}
  }
  /// Returns true if `iosVersion` has been explicitly set.
  var hasIosVersion: Bool {return self._iosVersion != nil}
  /// Clears the value of `iosVersion`. Subsequent reads from it will return its default value.
  mutating func clearIosVersion() {self._iosVersion = nil}

  var webimAccount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _iosVersion: Bb_IosVersion? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bb_IosVersion: @unchecked Sendable {}
extension Bb_IosConfig: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bb"

extension Bb_IosVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IosVersion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_IosVersion, rhs: Bb_IosVersion) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bb_IosConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IosConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_file"),
    2: .standard(proto: "prod_namespace"),
    3: .standard(proto: "prod_schemes"),
    4: .standard(proto: "test_namespace_suffix"),
    5: .standard(proto: "api_url"),
    6: .standard(proto: "mobile_app_ws_url"),
    7: .standard(proto: "sport_tree_ws_url"),
    8: .standard(proto: "oddin_tree_ws_url"),
    9: .standard(proto: "sportradar_url"),
    10: .standard(proto: "ios_version"),
    11: .standard(proto: "webim_account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.versionFile) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.prodNamespace) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.prodSchemes) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.testNamespaceSuffix) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.apiURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.mobileAppWsURL) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.sportTreeWsURL) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.oddinTreeWsURL) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.sportradarURL) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._iosVersion) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.webimAccount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.versionFile.isEmpty {
      try visitor.visitSingularStringField(value: self.versionFile, fieldNumber: 1)
    }
    if !self.prodNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.prodNamespace, fieldNumber: 2)
    }
    if !self.prodSchemes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.prodSchemes, fieldNumber: 3)
    }
    if !self.testNamespaceSuffix.isEmpty {
      try visitor.visitSingularStringField(value: self.testNamespaceSuffix, fieldNumber: 4)
    }
    if !self.apiURL.isEmpty {
      try visitor.visitSingularStringField(value: self.apiURL, fieldNumber: 5)
    }
    if !self.mobileAppWsURL.isEmpty {
      try visitor.visitSingularStringField(value: self.mobileAppWsURL, fieldNumber: 6)
    }
    if !self.sportTreeWsURL.isEmpty {
      try visitor.visitSingularStringField(value: self.sportTreeWsURL, fieldNumber: 7)
    }
    if !self.oddinTreeWsURL.isEmpty {
      try visitor.visitSingularStringField(value: self.oddinTreeWsURL, fieldNumber: 8)
    }
    if !self.sportradarURL.isEmpty {
      try visitor.visitSingularStringField(value: self.sportradarURL, fieldNumber: 9)
    }
    try { if let v = self._iosVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    if !self.webimAccount.isEmpty {
      try visitor.visitSingularStringField(value: self.webimAccount, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bb_IosConfig, rhs: Bb_IosConfig) -> Bool {
    if lhs.versionFile != rhs.versionFile {return false}
    if lhs.prodNamespace != rhs.prodNamespace {return false}
    if lhs.prodSchemes != rhs.prodSchemes {return false}
    if lhs.testNamespaceSuffix != rhs.testNamespaceSuffix {return false}
    if lhs.apiURL != rhs.apiURL {return false}
    if lhs.mobileAppWsURL != rhs.mobileAppWsURL {return false}
    if lhs.sportTreeWsURL != rhs.sportTreeWsURL {return false}
    if lhs.oddinTreeWsURL != rhs.oddinTreeWsURL {return false}
    if lhs.sportradarURL != rhs.sportradarURL {return false}
    if lhs._iosVersion != rhs._iosVersion {return false}
    if lhs.webimAccount != rhs.webimAccount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
